{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _values = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/values\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inheritsLoose\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _uncontrollable = _interopRequireDefault(require(\"uncontrollable\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _bootstrapUtils = require(\"./utils/bootstrapUtils\");\n\nvar _StyleConfig = require(\"./utils/StyleConfig\");\n\nvar _PanelBody = _interopRequireDefault(require(\"./PanelBody\"));\n\nvar _PanelHeading = _interopRequireDefault(require(\"./PanelHeading\"));\n\nvar _PanelTitle = _interopRequireDefault(require(\"./PanelTitle\"));\n\nvar _PanelFooter = _interopRequireDefault(require(\"./PanelFooter\"));\n\nvar _PanelToggle = _interopRequireDefault(require(\"./PanelToggle\"));\n\nvar _PanelCollapse = _interopRequireDefault(require(\"./PanelCollapse\"));\n\nvar has = Object.prototype.hasOwnProperty;\n\nvar defaultGetId = function defaultGetId(id, type) {\n  return id ? id + \"--\" + type : null;\n};\n\nvar propTypes = {\n  /**\n   * Controls the collapsed/expanded state ofthe Panel. Requires\n   * a `Panel.Collapse` or `<Panel.Body collapsible>` child component\n   * in order to actually animate out or in.\n   *\n   * @controllable onToggle\n   */\n  expanded: _propTypes.default.bool,\n\n  /**\n   * A callback fired when the collapse state changes.\n   *\n   * @controllable expanded\n   */\n  onToggle: _propTypes.default.func,\n  eventKey: _propTypes.default.any,\n\n  /**\n   * An HTML `id` attribute uniquely identifying the Panel component.\n   */\n  id: _propTypes.default.string\n};\nvar contextTypes = {\n  $bs_panelGroup: _propTypes.default.shape({\n    getId: _propTypes.default.func,\n    activeKey: _propTypes.default.any,\n    onToggle: _propTypes.default.func\n  })\n};\nvar childContextTypes = {\n  $bs_panel: _propTypes.default.shape({\n    headingId: _propTypes.default.string,\n    bodyId: _propTypes.default.string,\n    bsClass: _propTypes.default.string,\n    onToggle: _propTypes.default.func,\n    expanded: _propTypes.default.bool\n  })\n};\n\nvar Panel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Panel, _React$Component);\n\n  function Panel() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handleToggle = function (e) {\n      var panelGroup = _this.context.$bs_panelGroup;\n      var expanded = !_this.getExpanded();\n\n      if (panelGroup && panelGroup.onToggle) {\n        panelGroup.onToggle(_this.props.eventKey, expanded, e);\n      } else {\n        _this.props.onToggle(expanded, e);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = Panel.prototype;\n\n  _proto.getChildContext = function getChildContext() {\n    var _this$props = this.props,\n        eventKey = _this$props.eventKey,\n        id = _this$props.id;\n    var idKey = eventKey == null ? id : eventKey;\n    var ids;\n\n    if (idKey !== null) {\n      var panelGroup = this.context.$bs_panelGroup;\n      var getId = panelGroup && panelGroup.getId || defaultGetId;\n      ids = {\n        headingId: getId(idKey, 'heading'),\n        bodyId: getId(idKey, 'body')\n      };\n    }\n\n    return {\n      $bs_panel: (0, _extends2.default)({}, ids, {\n        bsClass: this.props.bsClass,\n        expanded: this.getExpanded(),\n        onToggle: this.handleToggle\n      })\n    };\n  };\n\n  _proto.getExpanded = function getExpanded() {\n    var panelGroup = this.context.$bs_panelGroup;\n\n    if (panelGroup && has.call(panelGroup, 'activeKey')) {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(this.props.expanded == null, 'Specifying `<Panel>` `expanded` in the context of an accordion ' + '`<PanelGroup>` is not supported. Set `activeKey` on the ' + '`<PanelGroup>` instead.') : void 0;\n      return panelGroup.activeKey === this.props.eventKey;\n    }\n\n    return !!this.props.expanded;\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        className = _this$props2.className,\n        children = _this$props2.children;\n\n    var _splitBsPropsAndOmit = (0, _bootstrapUtils.splitBsPropsAndOmit)(this.props, ['onToggle', 'eventKey', 'expanded']),\n        bsProps = _splitBsPropsAndOmit[0],\n        props = _splitBsPropsAndOmit[1];\n\n    return _react.default.createElement(\"div\", (0, _extends2.default)({}, props, {\n      className: (0, _classnames.default)(className, (0, _bootstrapUtils.getClassSet)(bsProps))\n    }), children);\n  };\n\n  return Panel;\n}(_react.default.Component);\n\nPanel.propTypes = propTypes;\nPanel.contextTypes = contextTypes;\nPanel.childContextTypes = childContextTypes;\nvar UncontrolledPanel = (0, _uncontrollable.default)((0, _bootstrapUtils.bsClass)('panel', (0, _bootstrapUtils.bsStyles)((0, _values.default)(_StyleConfig.State).concat([_StyleConfig.Style.DEFAULT, _StyleConfig.Style.PRIMARY]), _StyleConfig.Style.DEFAULT, Panel)), {\n  expanded: 'onToggle'\n});\n(0, _assign.default)(UncontrolledPanel, {\n  Heading: _PanelHeading.default,\n  Title: _PanelTitle.default,\n  Body: _PanelBody.default,\n  Footer: _PanelFooter.default,\n  Toggle: _PanelToggle.default,\n  Collapse: _PanelCollapse.default\n});\nvar _default = UncontrolledPanel;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}