{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inheritsLoose\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _uncontrollable = _interopRequireDefault(require(\"uncontrollable\"));\n\nvar _bootstrapUtils = require(\"./utils/bootstrapUtils\");\n\nvar _ValidComponentChildren = _interopRequireDefault(require(\"./utils/ValidComponentChildren\"));\n\nvar _PropTypes = require(\"./utils/PropTypes\");\n\nvar propTypes = {\n  accordion: _propTypes.default.bool,\n\n  /**\n   * When `accordion` is enabled, `activeKey` controls the which child `Panel` is expanded. `activeKey` should\n   * match a child Panel `eventKey` prop exactly.\n   *\n   * @controllable onSelect\n   */\n  activeKey: _propTypes.default.any,\n\n  /**\n   * A callback fired when a child Panel collapse state changes. It's called with the next expanded `activeKey`\n   *\n   * @controllable activeKey\n   */\n  onSelect: _propTypes.default.func,\n\n  /**\n   * An HTML role attribute\n   */\n  role: _propTypes.default.string,\n\n  /**\n   * A function that takes an eventKey and type and returns a\n   * unique id for each Panel heading and Panel Collapse. The function _must_ be a pure function,\n   * meaning it should always return the _same_ id for the same set of inputs. The default\n   * value requires that an `id` to be set for the PanelGroup.\n   *\n   * The `type` argument will either be `\"body\"` or `\"heading\"`.\n   *\n   * @defaultValue (eventKey, type) => `${this.props.id}-${type}-${key}`\n   */\n  generateChildId: _propTypes.default.func,\n\n  /**\n   * HTML id attribute, required if no `generateChildId` prop\n   * is specified.\n   */\n  id: (0, _PropTypes.generatedId)('PanelGroup')\n};\nvar defaultProps = {\n  accordion: false\n};\nvar childContextTypes = {\n  $bs_panelGroup: _propTypes.default.shape({\n    getId: _propTypes.default.func,\n    headerRole: _propTypes.default.string,\n    panelRole: _propTypes.default.string,\n    activeKey: _propTypes.default.any,\n    onToggle: _propTypes.default.func\n  })\n};\n\nvar PanelGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(PanelGroup, _React$Component);\n\n  function PanelGroup() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handleSelect = function (key, expanded, e) {\n      if (expanded) {\n        _this.props.onSelect(key, e);\n      } else if (_this.props.activeKey === key) {\n        _this.props.onSelect(null, e);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = PanelGroup.prototype;\n\n  _proto.getChildContext = function getChildContext() {\n    var _this$props = this.props,\n        activeKey = _this$props.activeKey,\n        accordion = _this$props.accordion,\n        generateChildId = _this$props.generateChildId,\n        id = _this$props.id;\n    var getId = null;\n\n    if (accordion) {\n      getId = generateChildId || function (key, type) {\n        return id ? id + \"-\" + type + \"-\" + key : null;\n      };\n    }\n\n    return {\n      $bs_panelGroup: (0, _extends2.default)({\n        getId: getId,\n        headerRole: 'tab',\n        panelRole: 'tabpanel'\n      }, accordion && {\n        activeKey: activeKey,\n        onToggle: this.handleSelect\n      })\n    };\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        accordion = _this$props2.accordion,\n        className = _this$props2.className,\n        children = _this$props2.children,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props2, [\"accordion\", \"className\", \"children\"]);\n\n    var _splitBsPropsAndOmit = (0, _bootstrapUtils.splitBsPropsAndOmit)(props, ['onSelect', 'activeKey']),\n        bsProps = _splitBsPropsAndOmit[0],\n        elementProps = _splitBsPropsAndOmit[1];\n\n    if (accordion) {\n      elementProps.role = elementProps.role || 'tablist';\n    }\n\n    var classes = (0, _bootstrapUtils.getClassSet)(bsProps);\n    return _react.default.createElement(\"div\", (0, _extends2.default)({}, elementProps, {\n      className: (0, _classnames.default)(className, classes)\n    }), _ValidComponentChildren.default.map(children, function (child) {\n      return (0, _react.cloneElement)(child, {\n        bsStyle: child.props.bsStyle || bsProps.bsStyle\n      });\n    }));\n  };\n\n  return PanelGroup;\n}(_react.default.Component);\n\nPanelGroup.propTypes = propTypes;\nPanelGroup.defaultProps = defaultProps;\nPanelGroup.childContextTypes = childContextTypes;\n\nvar _default = (0, _uncontrollable.default)((0, _bootstrapUtils.bsClass)('panel-group', PanelGroup), {\n  activeKey: 'onSelect'\n});\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}