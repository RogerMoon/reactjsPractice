{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/assertThisInitialized\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _elementType = _interopRequireDefault(require(\"react-prop-types/lib/elementType\"));\n\nvar _SafeAnchor = _interopRequireDefault(require(\"./SafeAnchor\"));\n\nvar _createChainedFunction = _interopRequireDefault(require(\"./utils/createChainedFunction\"));\n\nvar propTypes = {\n  /**\n   * only here to satisfy linting, just the html onClick handler.\n   *\n   * @private\n   */\n  onClick: _propTypes.default.func,\n\n  /**\n   * You can use a custom element for this component\n   */\n  componentClass: _elementType.default\n};\nvar defaultProps = {\n  componentClass: _SafeAnchor.default\n};\nvar contextTypes = {\n  $bs_panel: _propTypes.default.shape({\n    bodyId: _propTypes.default.string,\n    onToggle: _propTypes.default.func,\n    expanded: _propTypes.default.bool\n  })\n};\n\nvar PanelToggle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(PanelToggle, _React$Component);\n\n  function PanelToggle() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.handleToggle = _this.handleToggle.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    return _this;\n  }\n\n  var _proto = PanelToggle.prototype;\n\n  _proto.handleToggle = function handleToggle(event) {\n    var _ref = this.context.$bs_panel || {},\n        onToggle = _ref.onToggle;\n\n    if (onToggle) {\n      onToggle(event);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        onClick = _this$props.onClick,\n        className = _this$props.className,\n        componentClass = _this$props.componentClass,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props, [\"onClick\", \"className\", \"componentClass\"]);\n\n    var _ref2 = this.context.$bs_panel || {},\n        expanded = _ref2.expanded,\n        bodyId = _ref2.bodyId;\n\n    var Component = componentClass;\n    props.onClick = (0, _createChainedFunction.default)(onClick, this.handleToggle);\n    props['aria-expanded'] = expanded;\n    props.className = (0, _classnames.default)(className, !expanded && 'collapsed');\n\n    if (bodyId) {\n      props['aria-controls'] = bodyId;\n    }\n\n    return _react.default.createElement(Component, props);\n  };\n\n  return PanelToggle;\n}(_react.default.Component);\n\nPanelToggle.propTypes = propTypes;\nPanelToggle.defaultProps = defaultProps;\nPanelToggle.contextTypes = contextTypes;\nvar _default = PanelToggle;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}