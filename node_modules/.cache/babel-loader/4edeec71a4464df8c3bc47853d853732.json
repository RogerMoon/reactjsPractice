{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/assertThisInitialized\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _elementType = _interopRequireDefault(require(\"prop-types-extra/lib/elementType\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _bootstrapUtils = require(\"./utils/bootstrapUtils\");\n\nvar _createChainedFunction = _interopRequireDefault(require(\"./utils/createChainedFunction\"));\n\nvar _Fade = _interopRequireDefault(require(\"./Fade\"));\n\nvar propTypes = {\n  /**\n   * Uniquely identify the `<TabPane>` among its siblings.\n   */\n  eventKey: _propTypes.default.any,\n\n  /**\n   * Use animation when showing or hiding `<TabPane>`s. Use `false` to disable,\n   * `true` to enable the default `<Fade>` animation or\n   * a react-transition-group v2 `<Transition/>` component.\n   */\n  animation: _propTypes.default.oneOfType([_propTypes.default.bool, _elementType.default]),\n\n  /** @private * */\n  id: _propTypes.default.string,\n\n  /** @private * */\n  'aria-labelledby': _propTypes.default.string,\n\n  /**\n   * If not explicitly specified and rendered in the context of a\n   * `<TabContent>`, the `bsClass` of the `<TabContent>` suffixed by `-pane`.\n   * If otherwise not explicitly specified, `tab-pane`.\n   */\n  bsClass: _propTypes.default.string,\n\n  /**\n   * Transition onEnter callback when animation is not `false`\n   */\n  onEnter: _propTypes.default.func,\n\n  /**\n   * Transition onEntering callback when animation is not `false`\n   */\n  onEntering: _propTypes.default.func,\n\n  /**\n   * Transition onEntered callback when animation is not `false`\n   */\n  onEntered: _propTypes.default.func,\n\n  /**\n   * Transition onExit callback when animation is not `false`\n   */\n  onExit: _propTypes.default.func,\n\n  /**\n   * Transition onExiting callback when animation is not `false`\n   */\n  onExiting: _propTypes.default.func,\n\n  /**\n   * Transition onExited callback when animation is not `false`\n   */\n  onExited: _propTypes.default.func,\n\n  /**\n   * Wait until the first \"enter\" transition to mount the tab (add it to the DOM)\n   */\n  mountOnEnter: _propTypes.default.bool,\n\n  /**\n   * Unmount the tab (remove it from the DOM) when it is no longer visible\n   */\n  unmountOnExit: _propTypes.default.bool\n};\nvar contextTypes = {\n  $bs_tabContainer: _propTypes.default.shape({\n    getTabId: _propTypes.default.func,\n    getPaneId: _propTypes.default.func\n  }),\n  $bs_tabContent: _propTypes.default.shape({\n    bsClass: _propTypes.default.string,\n    animation: _propTypes.default.oneOfType([_propTypes.default.bool, _elementType.default]),\n    activeKey: _propTypes.default.any,\n    mountOnEnter: _propTypes.default.bool,\n    unmountOnExit: _propTypes.default.bool,\n    onPaneEnter: _propTypes.default.func.isRequired,\n    onPaneExited: _propTypes.default.func.isRequired,\n    exiting: _propTypes.default.bool.isRequired\n  })\n};\n/**\n * We override the `<TabContainer>` context so `<Nav>`s in `<TabPane>`s don't\n * conflict with the top level one.\n */\n\nvar childContextTypes = {\n  $bs_tabContainer: _propTypes.default.oneOf([null])\n};\n\nvar TabPane =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(TabPane, _React$Component);\n\n  function TabPane(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    _this.handleEnter = _this.handleEnter.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.handleExited = _this.handleExited.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.in = false;\n    return _this;\n  }\n\n  var _proto = TabPane.prototype;\n\n  _proto.getChildContext = function getChildContext() {\n    return {\n      $bs_tabContainer: null\n    };\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.shouldBeIn()) {\n      // In lieu of the action event firing.\n      this.handleEnter();\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    if (this.in) {\n      if (!this.shouldBeIn()) {\n        // We shouldn't be active any more. Notify the parent.\n        this.handleExited();\n      }\n    } else if (this.shouldBeIn()) {\n      // We are the active child. Notify the parent.\n      this.handleEnter();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.in) {\n      // In lieu of the action event firing.\n      this.handleExited();\n    }\n  };\n\n  _proto.getAnimation = function getAnimation() {\n    if (this.props.animation != null) {\n      return this.props.animation;\n    }\n\n    var tabContent = this.context.$bs_tabContent;\n    return tabContent && tabContent.animation;\n  };\n\n  _proto.handleEnter = function handleEnter() {\n    var tabContent = this.context.$bs_tabContent;\n\n    if (!tabContent) {\n      return;\n    }\n\n    this.in = tabContent.onPaneEnter(this, this.props.eventKey);\n  };\n\n  _proto.handleExited = function handleExited() {\n    var tabContent = this.context.$bs_tabContent;\n\n    if (!tabContent) {\n      return;\n    }\n\n    tabContent.onPaneExited(this);\n    this.in = false;\n  };\n\n  _proto.isActive = function isActive() {\n    var tabContent = this.context.$bs_tabContent;\n    var activeKey = tabContent && tabContent.activeKey;\n    return this.props.eventKey === activeKey;\n  };\n\n  _proto.shouldBeIn = function shouldBeIn() {\n    return this.getAnimation() && this.isActive();\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        eventKey = _this$props.eventKey,\n        className = _this$props.className,\n        onEnter = _this$props.onEnter,\n        onEntering = _this$props.onEntering,\n        onEntered = _this$props.onEntered,\n        onExit = _this$props.onExit,\n        onExiting = _this$props.onExiting,\n        onExited = _this$props.onExited,\n        propsMountOnEnter = _this$props.mountOnEnter,\n        propsUnmountOnExit = _this$props.unmountOnExit,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props, [\"eventKey\", \"className\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"mountOnEnter\", \"unmountOnExit\"]);\n    var _this$context = this.context,\n        tabContent = _this$context.$bs_tabContent,\n        tabContainer = _this$context.$bs_tabContainer;\n\n    var _splitBsPropsAndOmit = (0, _bootstrapUtils.splitBsPropsAndOmit)(props, ['animation']),\n        bsProps = _splitBsPropsAndOmit[0],\n        elementProps = _splitBsPropsAndOmit[1];\n\n    var active = this.isActive();\n    var animation = this.getAnimation();\n    var mountOnEnter = propsMountOnEnter != null ? propsMountOnEnter : tabContent && tabContent.mountOnEnter;\n    var unmountOnExit = propsUnmountOnExit != null ? propsUnmountOnExit : tabContent && tabContent.unmountOnExit;\n\n    if (!active && !animation && unmountOnExit) {\n      return null;\n    }\n\n    var Transition = animation === true ? _Fade.default : animation || null;\n\n    if (tabContent) {\n      bsProps.bsClass = (0, _bootstrapUtils.prefix)(tabContent, 'pane');\n    }\n\n    var classes = (0, _extends2.default)({}, (0, _bootstrapUtils.getClassSet)(bsProps), {\n      active: active\n    });\n\n    if (tabContainer) {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(!elementProps.id && !elementProps['aria-labelledby'], 'In the context of a `<TabContainer>`, `<TabPanes>` are given ' + 'generated `id` and `aria-labelledby` attributes for the sake of ' + 'proper component accessibility. Any provided ones will be ignored. ' + 'To control these attributes directly provide a `generateChildId` ' + 'prop to the parent `<TabContainer>`.') : void 0;\n      elementProps.id = tabContainer.getPaneId(eventKey);\n      elementProps['aria-labelledby'] = tabContainer.getTabId(eventKey);\n    }\n\n    var pane = _react.default.createElement(\"div\", (0, _extends2.default)({}, elementProps, {\n      role: \"tabpanel\",\n      \"aria-hidden\": !active,\n      className: (0, _classnames.default)(className, classes)\n    }));\n\n    if (Transition) {\n      var exiting = tabContent && tabContent.exiting;\n      return _react.default.createElement(Transition, {\n        in: active && !exiting,\n        onEnter: (0, _createChainedFunction.default)(this.handleEnter, onEnter),\n        onEntering: onEntering,\n        onEntered: onEntered,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: (0, _createChainedFunction.default)(this.handleExited, onExited),\n        mountOnEnter: mountOnEnter,\n        unmountOnExit: unmountOnExit\n      }, pane);\n    }\n\n    return pane;\n  };\n\n  return TabPane;\n}(_react.default.Component);\n\nTabPane.propTypes = propTypes;\nTabPane.contextTypes = contextTypes;\nTabPane.childContextTypes = childContextTypes;\n\nvar _default = (0, _bootstrapUtils.bsClass)('tab-pane', TabPane);\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}